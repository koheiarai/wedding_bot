{"filter":false,"title":"send-request.js","tooltip":"/http/send-request.js","undoManager":{"mark":9,"position":9,"stack":[[{"start":{"row":0,"column":0},"end":{"row":51,"column":0},"action":"insert","lines":["'use strict';","","const request = require('request');","const SmartResponse = require(__base + 'lib/http/smart-response');","const Time = require(__base + 'lib/utils/time');","const Logger = require(__base + 'lib/utils/logger');","","// TODO: process.env.MAX_RETRIESを追加","// TODO: process.env.NO_RETRY_STATUS_CODEを追加","// TODO: process.env.RETRY_INTERVAL_MSECを追加","const maxReries = (process.env.MAX_RETRIES || 5) + 1;","const noRetryStatusCode = process.env.NO_RETRY_STATUS_CODE || 0;","const retryIntervalMSec = process.env.RETRY_INTERVAL_MSEC || 3000;","","/**"," * リクエストを送信する。"," * statuscodeが200番台以外の場合にはリトライを行う。"," * @param {options} options"," */","function *sendRequest(options) {","    let response = null;","    for (let i = 0; i < maxReries; i++) {","        if (i > 0) {","            yield Time.timeSleep(retryIntervalMSec);","        }","        response = yield _request(options);","        let code = response.getStatusCode();","        Logger.debug(\"status code: \" + code);","        //statuscodeが呼び出し元によって指定された番号もしくは、500番台以外の場合はリトライしない","        if (code === noRetryStatusCode || code < 500) {","            break;","        }","    }","    return response;","}","","function _request(options) {","    const stack = (new Error().stack);","    Logger.debug(\"Options: \" + JSON.stringify(options));","    return new Promise((resolve, reject) => {","        request(options, (error, response, body) => {","            if (error) {","                reject(`${stack}\\n${error.stack}\\noptions: ${JSON.stringify(options)}\\nbody: ${JSON.stringify(body)}`);","                return;","            }","            resolve(new SmartResponse(body, response, options)); // リスポンスを返す","        });","    });","}","","module.exports = sendRequest;",""],"id":11}],[{"start":{"row":3,"column":40},"end":{"row":3,"column":43},"action":"remove","lines":["lib"],"id":12},{"start":{"row":3,"column":40},"end":{"row":3,"column":41},"action":"insert","lines":["h"]}],[{"start":{"row":3,"column":41},"end":{"row":3,"column":42},"action":"insert","lines":["t"],"id":13}],[{"start":{"row":3,"column":42},"end":{"row":3,"column":43},"action":"insert","lines":["t"],"id":14}],[{"start":{"row":3,"column":43},"end":{"row":3,"column":44},"action":"insert","lines":["p"],"id":15}],[{"start":{"row":3,"column":40},"end":{"row":3,"column":45},"action":"remove","lines":["http/"],"id":16}],[{"start":{"row":4,"column":0},"end":{"row":6,"column":0},"action":"remove","lines":["const Time = require(__base + 'lib/utils/time');","const Logger = require(__base + 'lib/utils/logger');",""],"id":17}],[{"start":{"row":20,"column":8},"end":{"row":20,"column":11},"action":"insert","lines":["// "],"id":18},{"start":{"row":21,"column":8},"end":{"row":21,"column":11},"action":"insert","lines":["// "]},{"start":{"row":22,"column":8},"end":{"row":22,"column":11},"action":"insert","lines":["// "]}],[{"start":{"row":25,"column":8},"end":{"row":25,"column":11},"action":"insert","lines":["// "],"id":19}],[{"start":{"row":36,"column":4},"end":{"row":36,"column":7},"action":"insert","lines":["// "],"id":20}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":4,"column":0},"end":{"row":4,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1521370930137,"hash":"5846fa643892160e7a659b9808b75258b9e61c03"}